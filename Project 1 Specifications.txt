Project 1: Too Many Creatures Due Date: June 5th, 2025 (11:59 PM) 
Project Guidelines: 
If there are questions about how to format your project, please refer to the “Project Guidelines” PDF attached to the message concerning “Project 1”. If there are any other questions, feel free to email either one of us at 
KAZI.MANSHA45@myhunter.cuny.edu or 
meheraan.khan66@myhunter.cuny.edu. 
Project Task: 
Welcome to the ancient land of Marleybone, a place filled with fascinating creatures of all kinds-magical, undead, animal, and humanoid beings coexist and roam the land. You, as a promising apprentice wizard from Wizard City, have been tasked with documenting and cataloging these creatures to expand the Library of Wizard City. To achieve this, you’ll be creating a detailed Creature class to store important information and perform various operations about each discovered creature. 
Creature Class: 
Data Members: 
//The name of the creature (string) 
string name_ 
//The category of the creature (enum) 
//Category {MAGICAL, UNDEAD, ANIMAL, HUMANOID}
Category category_ 
//The school that the creature belongs to (enum) 
//School {FIRE, ICE, STORM, LIFE, MYTH, DEATH} 
School school_ 
//The health of the creature (a non-zero, non-negative integer) int health_ 
//The level of the creature(a non-zero, non-negative integer)) int level_ 
//Flag that indicates if the creature is hostile or not (boolean) bool isHostile_ 
Member Functions: 
/** 
Default constructor. 
Default-initializes all private members. 
Default creature name: “NAMELESS” 
Default creature category: UNKNOWN 
Default creature school: UNKNOWN 
Default creature health: 1 
Default creature level: 1 
Booleans are default-initialized to False 
*/ 
Creature() 
/** 
Parameterized constructor. 
@param: The name of the creature (a string) 
@param: The category of the creature (a Category enum) with a default value UNKNOWN
@param: The school of the creature (a School enum) with a default value UNKNOWN 
@param: The health of the creature (an integer) with default value 1 if not provided, or if the value provided is 0 or negative 
@param: The level of the creature (an integer) with default value 1 if not provided, or if the value provided is 0 or negative 
@param: The hostility of the creature (a boolean) with default value of False */ 
Creature(const std::string& name, Category category, int health, int level, bool tame) 
/** 
@param: The name of the creature (a string) 
@post: Sets the Creature’s name to the value of the parameter in UPPERCASE (convert any lowercase character to uppercase) 
@post: Only alphabetical characters are allowed. If the input contains non-alphabetic characters, do nothing 
@return: true if the name was set, false otherwise 
*/ 
bool setName(const std::string& name) 
/** 
@return: The name of the Creature 
*/ 
std::string getName const 
/** 
@param: The category of the Creature (an enum) 
@post: Sets the Creature’s category to the value of the parameter */ 
void setCategory(const Category& category) 
/** 
@return: The category of the Creature (in string form) 
*/
std::string getCategory() const 
/** 
@param: The school of the Creature (an enum) 
@post: Sets the Creature’s school to the value of the parameter */ 
void setSchool(const School& school) 
/** 
@return: The school of the Creature (in string form) 
*/ 
std::string getSchool() const 
/** 
@param: An integer that represents the creature’s health @pre: Parameter must be greater than 0, if not, do nothing @post: Sets the health private member to the value of the parameter @return: true if the health was set, false otherwise 
*/ 
bool setHealth(const int& health) 
/** 
@return: The health of the Creature 
*/ 
int getHealth() const 
/** 
@param: An integer that represents the creature’s level 
@pre: Parameter must be greater than 0, if not, do nothing @post: Sets the health private member to the value of the parameter @return: true if the level was set, false otherwise 
*/ 
bool setLevel(const int& level)
/** 
@return: The level of the Creature 
*/ 
int getLevel() const 
/** 
@param: A boolean value of whether or not the Creature is hostile @post: Sets the isHostile flag to the value of the parameter */ 
void setHostility(const bool& isHostile) 
/** 
@return: true if the Creature is hostile, false otherwise 
Note: This is still an accessor function and must follow the same conventions as all accessor functions even if it not called getHostile() */ 
bool isHostile() const 
/** 
@post: Displays Creature data in the form: 
“[NAME]\n 
Category: [CATEGORY]\n 
School: [SCHOOL]\n 
Health: [HEALTH]\n 
Level: [LEVEL]\n 
Hostile: [TRUE/FALSE]” 
*/ 
void display() const;
Test Code: 
#include <iostream> 
#include "Creature.h" 
using namespace std; 
int main() { 
// Test default constructor 
Creature defaultCreature; 
defaultCreature.display(); 
cout << endl; 
// Test parameterized constructor with valid data Creature validCreature("Fire Dragon", 
Creature::Category::ANIMAL, Creature::School::FIRE, 150, 10, true); 
validCreature.display(); 
cout << endl; 
// Test parameterized constructor with invalid health and level 
Creature invalidCreature("Lost Soul", 
Creature::Category::UNDEAD, Creature::School::DEATH, -50, 0, true); 
invalidCreature.display(); 
cout << endl; 
//Test parameterized constructor with default values Creature defaultValuesCreature("Malistaire");
defaultValuesCreature.display(); 
// Test setName function with valid and invalid inputs if (validCreature.setName("Phoenix")) { 
cout << "Name set successfully." << endl; 
} else { 
cout << "Failed to set name." << endl; 
} 
validCreature.setName("123Dragon") 
if (validCreature.getName() == "Pheonix") { 
cout << "Correctly rejected invalid name." << endl; } 
validCreature.display(); 
cout << endl; 
// Test setters with valid and invalid inputs if (validCreature.setHealth(200)) { 
cout << "Health updated successfully." << endl; } else { 
cout << "Failed to update health." << endl; 
} 
if (!validCreature.setHealth(-10)) { 
cout << "Correctly rejected invalid health." << endl; 
} 
if (validCreature.setLevel(20)) { 
cout << "Level updated successfully." << endl;
} else { 
cout << "Failed to update level." << endl; 
} 
validCreature.setLevel(0) 
if (validCreature.getLevel() == 20) { 
cout << "Correctly rejected invalid level." << endl; 
} 
validCreature.setHostility(false); 
validCreature.display(); 
cout << endl; 
// Test getters 
cout << "Name: " << validCreature.getName() << endl; cout << "Category: " << validCreature.getCategory() << endl; 
cout << "School: " << validCreature.getSchool() << endl; 
cout << "Health: " << validCreature.getHealth() << endl; 
cout << "Level: " << validCreature.getLevel() << endl; cout << "Hostile: " << (validCreature.isHostile() ? "true" : "false") << endl; 
return 0; 
}